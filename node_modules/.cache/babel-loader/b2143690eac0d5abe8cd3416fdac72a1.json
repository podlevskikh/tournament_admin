{"ast":null,"code":"import jsonServerProvider from 'ra-data-json-server';\nimport { stringify } from 'query-string';\nimport { fetchUtils } from 'ra-core';\nconst Provider = jsonServerProvider('http://localhost:8080/api');\n\nProvider.getList = (resource, params) => {\n  const {\n    page,\n    perPage\n  } = params.pagination;\n  const {\n    field,\n    order\n  } = params.sort;\n  const query = {\n    sort: JSON.stringify([field, order]),\n    range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n    filter: JSON.stringify(params.filter)\n  };\n  const url = `http://localhost:8080/api/${resource}?${stringify(query)}`;\n  return fetchUtils.fetchJson(url).then(_ref => {\n    let {\n      headers,\n      json\n    } = _ref;\n    let jsonData;\n\n    switch (resource) {\n      case \"tournaments\":\n        {\n          jsonData = json.tournaments;\n          break;\n        }\n\n      case \"seasons\":\n        {\n          jsonData = json.seasons;\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n\n    const res = {\n      data: jsonData.map(resource => ({ ...resource,\n        id: resource.alias\n      })),\n      total: jsonData.length\n    };\n    console.log(res);\n    return res;\n  });\n};\n\nexport default Provider;","map":{"version":3,"sources":["/Users/podlevskikh/go/src/podlevskikh/volleymsk_admin/tournament_admin/src/Provider/index.tsx"],"names":["jsonServerProvider","stringify","fetchUtils","Provider","getList","resource","params","page","perPage","pagination","field","order","sort","query","JSON","range","filter","url","fetchJson","then","headers","json","jsonData","tournaments","seasons","res","data","map","id","alias","total","length","console","log"],"mappings":"AACA,OAAOA,kBAAP,MAA+B,qBAA/B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,UAAT,QAA2B,SAA3B;AAGA,MAAMC,QAAQ,GAAGH,kBAAkB,CAAC,2BAAD,CAAnC;;AAGAG,QAAQ,CAACC,OAAT,GAAmB,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACrC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAAM,CAACG,UAAjC;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAmBL,MAAM,CAACM,IAAhC;AACA,QAAMC,KAAK,GAAG;AACVD,IAAAA,IAAI,EAAEE,IAAI,CAACb,SAAL,CAAe,CAACS,KAAD,EAAQC,KAAR,CAAf,CADI;AAEVI,IAAAA,KAAK,EAAED,IAAI,CAACb,SAAL,CAAe,CAAC,CAACM,IAAI,GAAG,CAAR,IAAaC,OAAd,EAAuBD,IAAI,GAAGC,OAAP,GAAiB,CAAxC,CAAf,CAFG;AAGVQ,IAAAA,MAAM,EAAEF,IAAI,CAACb,SAAL,CAAeK,MAAM,CAACU,MAAtB;AAHE,GAAd;AAKA,QAAMC,GAAG,GAAI,6BAA4BZ,QAAS,IAAGJ,SAAS,CAACY,KAAD,CAAQ,EAAtE;AAEA,SAAOX,UAAU,CAACgB,SAAX,CAAqBD,GAArB,EAA0BE,IAA1B,CAA+B,QAAuB;AAAA,QAAtB;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAsB;AACzD,QAAIC,QAAJ;;AACA,YAAOjB,QAAP;AACI,WAAK,aAAL;AAAoB;AAChBiB,UAAAA,QAAQ,GAAGD,IAAI,CAACE,WAAhB;AACA;AACH;;AACD,WAAK,SAAL;AAAgB;AACZD,UAAAA,QAAQ,GAAGD,IAAI,CAACG,OAAhB;AACA;AACH;;AACD;AAAS;AACL;AACH;AAXL;;AAcA,UAAMC,GAAG,GAAG;AACRC,MAAAA,IAAI,EAAEJ,QAAQ,CAACK,GAAT,CAAatB,QAAQ,KAAK,EAAC,GAAGA,QAAJ;AAAcuB,QAAAA,EAAE,EAAEvB,QAAQ,CAACwB;AAA3B,OAAL,CAArB,CADE;AAERC,MAAAA,KAAK,EAAER,QAAQ,CAACS;AAFR,KAAZ;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACA,WAAOA,GAAP;AACH,GAtBM,CAAP;AAuBH,CAjCD;;AAmCA,eAAetB,QAAf","sourcesContent":["import * as React from \"react\";\nimport jsonServerProvider from 'ra-data-json-server';\nimport { stringify } from 'query-string';\nimport { fetchUtils } from 'ra-core';\n\n\nconst Provider = jsonServerProvider('http://localhost:8080/api');\n\n\nProvider.getList = (resource, params) => {\n    const { page, perPage } = params.pagination;\n    const { field, order } = params.sort;\n    const query = {\n        sort: JSON.stringify([field, order]),\n        range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n        filter: JSON.stringify(params.filter),\n    };\n    const url = `http://localhost:8080/api/${resource}?${stringify(query)}`;\n\n    return fetchUtils.fetchJson(url).then(({ headers, json }) => {\n        let jsonData;\n        switch(resource) {\n            case \"tournaments\": {\n                jsonData = json.tournaments;\n                break;\n            }\n            case \"seasons\": {\n                jsonData = json.seasons;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n\n        const res = {\n            data: jsonData.map(resource => ({...resource, id: resource.alias})),\n            total: jsonData.length\n        };\n        console.log(res);\n        return res\n    });\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}