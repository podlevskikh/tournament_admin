{"ast":null,"code":"import jsonServerProvider from 'ra-data-json-server';\nimport { stringify } from 'query-string';\nimport { fetchUtils } from 'ra-core';\nexport const Provider = () => {\n  const p = jsonServerProvider('http://localhost:8080/api');\n\n  p.getList = (resource, params) => {\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const {\n      field,\n      order\n    } = params.sort;\n    const query = {\n      sort: JSON.stringify([field, order]),\n      range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n      filter: JSON.stringify(params.filter)\n    };\n    const url = `http://localhost:8080/api/${resource}?${stringify(query)}`;\n    return fetchUtils.fetchJson(url).then(_ref => {\n      let {\n        headers,\n        json\n      } = _ref;\n      let jsonData;\n\n      switch (resource) {\n        case \"tournaments\":\n          {\n            jsonData = json.tournaments;\n            break;\n          }\n\n        case \"seasons\":\n          {\n            jsonData = json.seasons;\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n\n      const res = {\n        data: jsonData.map(resource => ({ ...resource,\n          id: resource.alias\n        })),\n        total: jsonData.length\n      };\n      console.log(res);\n      return res;\n    });\n  };\n\n  p.getOne = (resource, params) => {\n    const url = `http://localhost:8080/api/${resource}/${params.id}`;\n    return fetchUtils.fetchJson(url).then(_ref2 => {\n      let {\n        json\n      } = _ref2;\n      return { ...json,\n        id: json._id\n      };\n    });\n  };\n\n  return p;\n};\n_c = Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/podlevskikh/go/src/podlevskikh/volleymsk_admin/tournament_admin/src/provider/index.tsx"],"names":["jsonServerProvider","stringify","fetchUtils","Provider","p","getList","resource","params","page","perPage","pagination","field","order","sort","query","JSON","range","filter","url","fetchJson","then","headers","json","jsonData","tournaments","seasons","res","data","map","id","alias","total","length","console","log","getOne","_id"],"mappings":"AACA,OAAOA,kBAAP,MAA+B,qBAA/B;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,SAAQC,UAAR,QAAyB,SAAzB;AAGA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC1B,QAAMC,CAAC,GAAGJ,kBAAkB,CAAC,2BAAD,CAA5B;;AAEAI,EAAAA,CAAC,CAACC,OAAF,GAAY,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAC9B,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAkBF,MAAM,CAACG,UAA/B;AACA,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAiBL,MAAM,CAACM,IAA9B;AACA,UAAMC,KAAK,GAAG;AACVD,MAAAA,IAAI,EAAEE,IAAI,CAACd,SAAL,CAAe,CAACU,KAAD,EAAQC,KAAR,CAAf,CADI;AAEVI,MAAAA,KAAK,EAAED,IAAI,CAACd,SAAL,CAAe,CAAC,CAACO,IAAI,GAAG,CAAR,IAAaC,OAAd,EAAuBD,IAAI,GAAGC,OAAP,GAAiB,CAAxC,CAAf,CAFG;AAGVQ,MAAAA,MAAM,EAAEF,IAAI,CAACd,SAAL,CAAeM,MAAM,CAACU,MAAtB;AAHE,KAAd;AAKA,UAAMC,GAAG,GAAI,6BAA4BZ,QAAS,IAAGL,SAAS,CAACa,KAAD,CAAQ,EAAtE;AAEA,WAAOZ,UAAU,CAACiB,SAAX,CAAqBD,GAArB,EAA0BE,IAA1B,CAA+B,QAAqB;AAAA,UAApB;AAACC,QAAAA,OAAD;AAAUC,QAAAA;AAAV,OAAoB;AACvD,UAAIC,QAAJ;;AACA,cAAQjB,QAAR;AACI,aAAK,aAAL;AAAoB;AAChBiB,YAAAA,QAAQ,GAAGD,IAAI,CAACE,WAAhB;AACA;AACH;;AACD,aAAK,SAAL;AAAgB;AACZD,YAAAA,QAAQ,GAAGD,IAAI,CAACG,OAAhB;AACA;AACH;;AACD;AAAS;AACL;AACH;AAXL;;AAcA,YAAMC,GAAG,GAAG;AACRC,QAAAA,IAAI,EAAEJ,QAAQ,CAACK,GAAT,CAAatB,QAAQ,KAAK,EAAC,GAAGA,QAAJ;AAAcuB,UAAAA,EAAE,EAAEvB,QAAQ,CAACwB;AAA3B,SAAL,CAArB,CADE;AAERC,QAAAA,KAAK,EAAER,QAAQ,CAACS;AAFR,OAAZ;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACA,aAAOA,GAAP;AACH,KAtBM,CAAP;AAuBH,GAjCD;;AAoCAtB,EAAAA,CAAC,CAAC+B,MAAF,GAAW,CAAC7B,QAAD,EAAWC,MAAX,KAAsB;AAC7B,UAAMW,GAAG,GAAI,6BAA4BZ,QAAS,IAAGC,MAAM,CAACsB,EAAG,EAA/D;AACA,WAAO3B,UAAU,CAACiB,SAAX,CAAqBD,GAArB,EAA0BE,IAA1B,CAA+B,SAAY;AAAA,UAAX;AAACE,QAAAA;AAAD,OAAW;AAC9C,aAAO,EAAC,GAAGA,IAAJ;AAAUO,QAAAA,EAAE,EAAEP,IAAI,CAACc;AAAnB,OAAP;AACH,KAFM,CAAP;AAGH,GALD;;AAOA,SAAOhC,CAAP;AACH,CA/CM;KAAMD,Q","sourcesContent":["import * as React from \"react\";\nimport jsonServerProvider from 'ra-data-json-server';\nimport {stringify} from 'query-string';\nimport {fetchUtils} from 'ra-core';\n\n\nexport const Provider = () => {\n    const p = jsonServerProvider('http://localhost:8080/api');\n\n    p.getList = (resource, params) => {\n        const {page, perPage} = params.pagination;\n        const {field, order} = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        const url = `http://localhost:8080/api/${resource}?${stringify(query)}`;\n\n        return fetchUtils.fetchJson(url).then(({headers, json}) => {\n            let jsonData;\n            switch (resource) {\n                case \"tournaments\": {\n                    jsonData = json.tournaments;\n                    break;\n                }\n                case \"seasons\": {\n                    jsonData = json.seasons;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n\n            const res = {\n                data: jsonData.map(resource => ({...resource, id: resource.alias})),\n                total: jsonData.length\n            };\n            console.log(res);\n            return res\n        });\n    };\n\n\n    p.getOne = (resource, params) => {\n        const url = `http://localhost:8080/api/${resource}/${params.id}`;\n        return fetchUtils.fetchJson(url).then(({json}) => {\n            return {...json, id: json._id};\n        });\n    };\n\n    return p\n};\n\n"]},"metadata":{},"sourceType":"module"}